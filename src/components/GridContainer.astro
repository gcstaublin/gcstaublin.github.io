---
import "../styles/global.css";
import TextBlockGraph from "./TextBlockGraph.astro";

const {
  gridLayout = "two",
  gridGap = "gap400",
  collapseGap,
  caption = "Dude, poop",
  ...attrs
} = Astro.props;

const gaps = {
  gap000: "grid-gap--0",
  gap100: "grid-gap--100",
  gap200: "grid-gap--200",
  gap300: "grid-gap--300",
  gap400: "grid-gap--400",
  gap500: "grid-gap--500",
};

const layouts = {
  one: "grid__container--one-up",
  two: "grid__container--two-up",
  three: "grid__container--three-up",
  threeFit: "grid__container--three-up-fit",
  threeFill: "grid__container--three-up-fill",
};

interface Props {
  gridGap: keyof typeof gaps;
  gridLayout: keyof typeof layouts;
  collapseGap: boolean;
  caption?: string;
}
---

{/* ================================== */}
{/* HTML Structure                     */}
{/* ================================== */}
<div class="grid__wrapper">
  <div
    class:list={[
      "grid__container",
      gaps[gridGap],
      layouts[gridLayout],
      attrs.class,
    ]}
  >
    <slot />
  </div>
  {caption && <TextBlockGraph text={caption} />}
</div>

{/* ================================== */}
{/* Style                              */}
{/* ================================== */}
<style>
  :root {
    /* --grid-container-gap: 40px; */
  }

  .grid__wrapper {
    border: 1px solid blue;

    p {
      /* margin-inline-start: 8px; */
      /* margin-block-start: 8px; */
    }
  }
  .grid-gap--0 {
    --grid-container-gap: 0;
  }
  .grid-gap--100 {
    --grid-container-gap: 10px;
  }
  .grid-gap--200 {
    --grid-container-gap: 20px;
  }
  .grid-gap--300 {
    --grid-container-gap: 30px;
  }
  .grid-gap--400 {
    --grid-container-gap: 40px;
  }
  .grid-gap--500 {
    --grid-container-gap: 50px;
  }
  .grid__container {
    --gap: var(--grid-container-gap);

    display: grid;
    gap: var(--gap);
  }

  .grid--collapse {
    gap: 0;
  }

  .grid__container--one-up {
    grid-template-columns: 1fr;
  }

  .grid__container--two-up {
    grid-template-columns: 1fr 1fr;
    @media (max-width: 700px) {
      grid-template-columns: 1fr;
    }
  }

  .grid__container--three-up {
    grid-template-columns: 1fr 1fr 1fr;
    @media (max-width: 700px) {
      grid-template-columns: 1fr;
    }
  }

  .grid__container--three-up-fit {
    --min-width: 455px;

    /* background-color: red; */
    /* grid-template-columns: repeat(3, 1fr) */
    /* grid-template-columns: repeat(auto-fit, 300px); */
    /* grid-template-columns: repeat(auto-fit, minmax(var(--min-width), 1fr)); */
    grid-template-columns: repeat(
      auto-fit,
      minmax(min(var(--min-width), 100%), 1fr)
    );
    /* grid-template-columns: repeat(
      auto-fill,
      minmax(min(var(--min-width), 100%), 1fr)
    ); */
  }

  .grid__container--three-up-fill {
    --grid-col-min-width: 255px;

    background-color: blue;

    grid-template-columns: repeat(
      auto-fill,
      minmax(min(var(--grid-col-min-width), 100%), 1fr)
    );
  }
</style>
