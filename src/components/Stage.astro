---
import "../styles/global.css";
import ImageBlock from "./ImageBlock.astro";

const {
  imageSrc,
  topper,
  isSmall,
  innerWidth = "default",
  // inlinePadding = "default",
  blockPadding = "default",
  background = "default",
} = Astro.props;

const widths = {
  default: "stage__inner-width--default",
  full: "stage__inner-width--full",
  half: "stage__inner-width--half",
};

// const inlinePaddings = {
//   default: "stage__inner-inline-pad--default",
//   none: "stage__inner-inline-pad--none",
// };

const blockPaddings = {
  default: "stage__inner-block-pad--default",
  none: "stage__inner-block-pad--none",
};

const backgrounds = {
  default: "stage-bg--default",
  transparent: "stage-bg--transparent",
};

interface Props {
  imageSrc?: string;
  topper: boolean;
  isSmall: boolean;
  innerWidth: keyof typeof widths;
  inlinePadding: keyof typeof inlinePaddings;
  blockPadding: keyof typeof blockPaddings;
  background: keyof typeof backgrounds;
}
---

{/* ================================== */}
{/* HTML Structure                     */}
{/* ================================== */}
<div class:list={["stage", { hasTopper: topper }, backgrounds[background]]}>
  <div
    class:list={[
      "stage__inner",
      widths[innerWidth],
      blockPaddings[blockPadding],
    ]}
  >
    {
      topper && (
        <div
          class:list={[
            "interface__topper",
            { interface__topperSmall: isSmall },
          ]}
        >
          <span class="interface-dot" />
          <span class="interface-dot" />
          <span class="interface-dot" />
        </div>
      )
    }
    {imageSrc && <ImageBlock imageSrc={imageSrc} />}
    <slot name="custom-image" />
    <slot name="after-image" />
  </div>
</div>

{/* ================================== */}
{/* Style                              */}
{/* ================================== */}
<style>
  /* Root Variables */
  /* ============================== */
  :root {
    --stage-bg: #efefef;
    --stage-radius: 8px;
    --stage-max-width: 80%;
    --stage-block-pad: 8%;
    --interface-topper-bg: #313131;
    --interface-topper-height: 20px;
    --interface-topper-height-small: 15px;
    --interface-dot-size: calc(var(--interface-topper-height) / 2);
  }

  /* Overrides */
  /* ============================== */

  .stage-bg--transparent {
    --stage-bg: transparent;
  }

  .stage__inner-block-pad--none {
    --stage-block-pad: 0;
  }

  /* Stage */
  /* ============================== */
  .stage {
    width: 100%;
    margin-inline: auto;
    background-color: var(--stage-bg);
    border-radius: var(--stage-radius);

    .stage__inner {
      width: fit-content;
      margin-inline: auto;
      max-width: 80%;
      max-width: var(--stage-max-width);
      padding-block: var(--stage-block-pad);
      border-radius: var(--stage-radius);
    }
  }

  .hasTopper {
    --imageBlock-radius-start: 0px;
  }
</style>

<style is:global>
  /* Theme Color Vars */
  /* ============================== */
  .theme1 {
    /* --stage-bg: #2d4a7d; */
    --stage-bg: rgba(45, 74, 125, 0.35);
    /* --interface-topper-bg: rgba(0, 0, 0, 0.4); */
  }
  .theme2 {
    /* --stage-bg: #565352; */
    --stage-bg: rgba(86, 83, 82, 0.25);
    /* --interface-topper-bg: rgba(0, 0, 0, 0.4); */
  }

  .theme3 {
    /* --stage-bg: #d9d378; */
    --stage-bg: rgba(217, 211, 120, 0.7);
    /* --interface-topper-bg: rgba(0, 0, 0, 0.4); */
  }

  /* Interface topper */
  /* ============================== */
  .interface__topper {
    /* position: relative; */
    position: sticky;
    top: 0;
    z-index: 1;
    width: 100%;
    height: var(--interface-topper-height);
    margin-bottom: -2px;
    border-top-left-radius: var(--stage-radius);
    border-top-right-radius: var(--stage-radius);
    background-color: var(--interface-topper-bg);
    display: flex;
    gap: 4px;
    align-items: center;
    padding-inline: calc(var(--interface-topper-height) / 2);
  }

  .interface__topperSmall {
    --interface-topper-height: var(--interface-topper-height-small);
  }

  .interface-dot {
    width: calc(var(--interface-topper-height) / 3.5);
    height: calc(var(--interface-topper-height) / 3.5);
    display: inline-block;
    border-radius: 100%;
    &:nth-of-type(1) {
      background-color: #ff5f57ba;
    }
    &:nth-of-type(2) {
      background-color: #febc2fba;
    }
    &:nth-of-type(3) {
      background-color: #28c840ba;
    }
  }
</style>
